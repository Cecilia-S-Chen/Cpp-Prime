#include <iostream>
using namespace std;

int main3()
{
    int a1 = 123;
    auto f1 = [a1] { cout << a1 << endl; };
    f1(); // 输出：123

    //或通过“函数体”后面的‘()’传入参数
    [](int a){cout << a << endl;}(123);

    //——————————————————————————————————————————————————————  一、值捕获  ————————————————————————————————————————————————————————————————————————————
    int a2 = 123;
    auto f2 = [a2] { cout << a2 << endl; };
    a2 = 321;
    f2(); // 输出：123

    //——————————————————————————————————————————————————————  二、引用捕获 ————————————————————————————————————————————————————————————————————————————
    /*
     * 1.引用范围： 对于不能值捕获，采用隐式捕获。例如ostream对象
     * 2. 值捕获与隐式捕获区别：
     *      * 值捕获在lambda创建的时候拷贝对象，不是在lambda调用的时候拷贝对象。不受被捕获对象作用域的影响。
     *      * 引用捕获，必须保证lambda调用时，被引用对象存在。如果lambda是在定义的函数结束后执行，此时被引用的对象作用域已经结束，引用会有问题！！
     */
    int a3 = 123;
    auto f3 = [&a3] { cout << a3 << endl; };
    a3 = 321;
    f3(); // 输出：321

    //—————————————————————————————————————————————————————— 三、隐式捕获 —————————————————————————————————————————————————————————————————————————————
    /*
    1、隐式捕获定义：上面的值捕获和引用捕获都需要我们在捕获列表中显示列出Lambda表达式中使用的外部变量。除此之外，我们还可以让编译器根据函数体中的代码来推断需要捕获哪些变量，这种方式称之为隐式捕获。
    2、隐式捕获表达方式：
      （1）[=]表示以值捕获的方式捕获外部变量
      （2）[&]表示以引用捕获的方式捕获外部变量。
    */
    int a4 = 123;
    auto f4 = [=] { cout << a4 << endl; };    // 值捕获
    f4(); // 输出：123

    int a5 = 123;
    auto f5 = [&] { cout << a5 << endl; };    // 引用捕获
    a5 = 321;
    f5(); // 输出：321


  //———————————————————————————————————————————————————————— 四、混合方式—————————————————————————————————————————————————————————————————————————————————
  /*
  捕获形式	说明
[]	不捕获任何外部变量
[变量名, …]	默认以值得形式捕获指定的多个外部变量（用逗号分隔），如果引用捕获，需要显示声明（使用&说明符）
[this]	以值的形式捕获this指针
[=]	以值的形式捕获所有外部变量
[&]	以引用形式捕获所有外部变量
[=, &x]	变量x以引用形式捕获，其余变量以传值形式捕获
[&, x]	变量x以值的形式捕获，其余变量以引用形式捕获

   * 捕获列表中隐式捕获在前，显示捕获在后
  */


}
