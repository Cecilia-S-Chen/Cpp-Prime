#include <iostream>
using namespace std;

int main()
{
    int a = 123;
    auto f = [a] { cout << a << endl; }; 
    f(); // 输出：123

    //或通过“函数体”后面的‘()’传入参数
    auto x = [](int a){cout << a << endl;}(123); 
    
    //——————————————————————————————————————————————————————  一、值捕获  ————————————————————————————————————————————————————————————————————————————
    int a = 123;
    auto f = [a] { cout << a << endl; }; 
    a = 321;
    f(); // 输出：123
    
    //——————————————————————————————————————————————————————  二、引用捕获 ————————————————————————————————————————————————————————————————————————————
    int a = 123;
    auto f = [&a] { cout << a << endl; }; 
    a = 321;
    f(); // 输出：321
    
    //—————————————————————————————————————————————————————— 三、隐式捕获 —————————————————————————————————————————————————————————————————————————————
    /*
    1、隐式捕获定义：上面的值捕获和引用捕获都需要我们在捕获列表中显示列出Lambda表达式中使用的外部变量。除此之外，我们还可以让编译器根据函数体中的代码来推断需要捕获哪些变量，这种方式称之为隐式捕获。
    2、隐式捕获表达方式：
      （1）[=]表示以值捕获的方式捕获外部变量
      （2）[&]表示以引用捕获的方式捕获外部变量。
    */
    int a = 123;
    auto f = [=] { cout << a << endl; };    // 值捕获
    f(); // 输出：123
    
    int a = 123;
    auto f = [&] { cout << a << endl; };    // 引用捕获
    a = 321;
    f(); // 输出：321
    

  //———————————————————————————————————————————————————————— 四、混合方式—————————————————————————————————————————————————————————————————————————————————
  /*
  捕获形式	说明
[]	不捕获任何外部变量
[变量名, …]	默认以值得形式捕获指定的多个外部变量（用逗号分隔），如果引用捕获，需要显示声明（使用&说明符）
[this]	以值的形式捕获this指针
[=]	以值的形式捕获所有外部变量
[&]	以引用形式捕获所有外部变量
[=, &x]	变量x以引用形式捕获，其余变量以传值形式捕获
[&, x]	变量x以值的形式捕获，其余变量以引用形式捕获
  */
  
  
}
